---
apiVersion: openunison.tremolo.io/v1
kind: Workflow
metadata:
  name: sync-harbor-pull-secret
  namespace: {{ .Release.Namespace }}
spec:
  description: onboard harbor tenant
  inList: false
  label: Add tenant environment robot to harbor
  orgId: 43625c4c-43a5-4e48-89da-7005a60cfcff
  tasks: |-
    - taskType: customTask
      className: com.tremolosecurity.provisioning.customTasks.JavaScriptTask
      params:
        javaScript: |-
          System = Java.type("java.lang.System");
          HttpClient = Java.type("java.net.http.HttpClient");
          HttpRequest = Java.type("java.net.http.HttpRequest");
          URI = Java.type("java.net.URI");
          BodyPublishers = Java.type("java.net.http.HttpRequest.BodyPublishers");
          BodyHandlers = Java.type("java.net.http.HttpResponse.BodyHandlers");
          K8sUtils = Java.type("com.tremolosecurity.k8s.util.K8sUtils");
          JSUtils = Java.type("com.tremolosecurity.util.JSUtils");
          Base64 = Java.type("java.util.Base64");

          function init(task,params) {
            // nothing to do
          }

          function reInit(task) {
            // do nothing
          }

          function cert2pem(certName) {
            GlobalEntries = Java.type("com.tremolosecurity.server.GlobalEntries");
            Base64 = Java.type("org.apache.commons.codec.binary.Base64");
            StringBuffer = Java.type("java.lang.StringBuffer");

            cert = GlobalEntries.getGlobalEntries().getConfigManager().getCertificate(certName);
            encoder = new Base64(64);
            b = new StringBuffer();
            b.append("-----BEGIN CERTIFICATE-----\n");
            b.append(encoder.encodeAsString(cert.getEncoded()));
            b.append("-----END CERTIFICATE-----");
            pem = b.toString();
            lines = pem.split('\n');
            pem = "";
            for (var i=0;i<lines.length;i++) {
              pem = pem + "    " + lines[i] + '\n';
            }

            return pem;

          }

          function doTask(user,request) {
            System = Java.type("java.lang.System");
            pem = cert2pem("unison-ca");
            request.put("certwithspaces",pem);
            

            return true;
          }

    # create a ConfigMap with the CA cert for vault
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
      params: 
        targetName: k8s-$nameSpace$-$env$
        template: |-
            kind: ConfigMap
            metadata:
              name: enterprise-ca
              namespace: default
            apiVersion: v1
            data:
              ca.crt: |-
            $certwithspaces$
        srcType: yaml
        writeToRequest: "true"
        requestAttribute: pullsecret-k8s-$nameSpace$-$env$
        path: /yaml/namespaces/default/configmaps/enterprise-ca.yaml

    # Create a SecretStore to tell the ExternalSecretsOperator where to get secrets from
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
      params: 
        targetName: k8s-$nameSpace$-$env$
        template: |-
            apiVersion: external-secrets.io/v1beta1
            kind: SecretStore
            metadata:
              name: vault
              namespace: default
            spec:
              provider:
                vault:
                  server: "{{ .Values.vault_url }}"
                  path: "secret"
                  version: "v2"
                  caProvider:
                    # Can be Secret or ConfigMap
                    type: "ConfigMap"
                    name: "enterprise-ca"
                    key: "ca.crt"
                    namespace: "default"
                  auth:
                    # Authenticate against Vault using a Kubernetes ServiceAccount
                    # token stored in a Secret.
                    # https://www.vaultproject.io/docs/auth/kubernetes
                    kubernetes:
                      # Path where the Kubernetes authentication backend is mounted in Vault
                      mountPath: "vcluster-$nameSpace$-$env$"
                      # A required field containing the Vault Role to assume.
                      role: "cluster-read"
                      # Optional service account field containing the name
                      # of a kubernetes ServiceAccount
                      serviceAccountRef:
                        name: "default"
        srcType: yaml
        writeToRequest: "true"
        requestAttribute: pullsecret-k8s-$nameSpace$-$env$
        path: /yaml/namespaces/default/secretstores/vault.yaml

    # create the pull secret from vault
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.CreateK8sObject
      params: 
        targetName: k8s-$nameSpace$-$env$
        template: |-
            apiVersion: external-secrets.io/v1beta1
            kind: ExternalSecret
            metadata:
              name: pull-secret
              namespace: default
            spec:
              refreshInterval: 1m           # rate SecretManager pulls GCPSM
              secretStoreRef:
                kind: SecretStore
                name: vault               # name of the SecretStore (or kind specified)
              target:
                name: pull-secret  # name of the k8s Secret to be created
                template:
                  type: kubernetes.io/dockerconfigjson
              data:
                - secretKey: .dockerconfigjson
                  remoteRef:
                    key: vclusters/$nameSpace$-$env$/ns/default/pullsecret
                    property: .dockerconfigjson
        srcType: yaml
        writeToRequest: "true"
        requestAttribute: pullsecret-k8s-$nameSpace$-$env$
        path: /yaml/namespaces/default/externalsecrets/pull-secret.yaml

    # GitOps - push to vCluster repo
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.PushToGit
      params:
        secretName: openunison-git-$nameSpace$-$env$-key
        nameSpace: openunison
        target: k8s
        keyName: id_rsa
        gitRepo: git@{{ .Values.gitlab_ssh_host }}:$nameSpace$-$env$/$nameSpace$-ops.git
        requestObject: pullsecret-k8s-$nameSpace$-$env$
        commitMsg: $env$ pull secret workflow $WORKFLOW.id$

    # wait for the namespaces to sync
    - taskType: customTask
      className: com.tremolosecurity.provisioning.tasks.WaitForStatus
      params:
        holdingTarget: k8s
        namespace: openunison
        target: k8s-$nameSpace$-$env$
        uri: /api/v1/namespaces/default/configmaps/enterprise-ca
        label: wait-ns-$env$-pull-secret-$nameSpace$
        conditions: []

    - taskType: customTask
      className: com.tremolosecurity.provisioning.customTasks.PrintUserInfo
      params:
        message: "$env$ pull secret synced"